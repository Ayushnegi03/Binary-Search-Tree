//Binary Search Tree For Insertion Deletion And Searching..
class Node {
    constructor(data, left = null, right = null) {
      this.data = data;
      this.left = left;
      this.right = right;
    }
  }
  class BST {
    constructor() {
      this.root = null;
    }
    add(data) {
      const node = this.root;
      if (node === null) {
        this.root = new Node(data);
        return;
      } else {
        const SearchTree = function(node) {
          if (data < node.data) {
            if (node.left === null) {
              node.left = new Node(data);
              return;
            } else if (node.left !== null) {
              return SearchTree(node.left);
            }
          } else if (data > node.data) {
            if (node.right === null) {
              node.right = new Node(data);
              return;
            } else if (node.right !== null) {
              return SearchTree(node.right);
            }
          } else {
            return null;
          }
        };
        return SearchTree(node);
      }
    } 
    find(data) {
      let Current = this.root;
      while (Current.data !== data) {
        if (data < Current.data) {
          Current = Current.left;
        } else {
          Current = Current.right;
        }
        if (Current === null) {
          return null;
        }
      }
      return Current;
    }
    isPresent(data) {
      let Current = this.root;
      while (Current) {
        if (data === Current.data) {
          return true;
        }
        if (data < Current.data) {
          Current = Current.left;
        } else {
          Current = Current.right;
        }
      }
      return false;
    }
    remove(data) {
      const removeNode = function(node, data) {
        if (node == null) {
          return null;
        }
        if (data == node.data) {         
          if (node.left == null && node.right == null) {
            return null;
          }         
          if (node.left == null) {
            return node.right;
          } 
          if (node.right == null) {
            return node.left;
          } 
          var tempNode = node.right;
          while (tempNode.left !== null) {
            tempNode = tempNode.left;
          }
          node.data = tempNode.data;
          node.right = removeNode(node.right, tempNode.data);
          return node;
        } else if (data < node.data) {
          node.left = removeNode(node.left, data);
          return node;
        } else {
          node.right = removeNode(node.right, data);
          return node;
        }
      }
      this.root = removeNode(this.root, data);
    }
    
    InOrder() {
      if (this.root == null) {
        return null;
      } else {
        var result = new Array();
        function traverseInOrder(node) {       
          node.left && traverseInOrder(node.left);
          result.push(node.data);
          node.right && traverseInOrder(node.right);
        }
        traverseInOrder(this.root);
        return result;
      };
    }
    PreOrder() {
      if (this.root == null) {
        return null;
      } else {
        var result = new Array();
        function traversePreOrder(node) {
          result.push(node.data);
          node.left && traversePreOrder(node.left);
          node.right && traversePreOrder(node.right);
        };
        traversePreOrder(this.root);
        return result;
      };
    }
    PostOrder() {
      if (this.root == null) {
        return null;
      } else {
        var Result = new Array();
        function traversePostOrder(node) {
          node.left && traversePostOrder(node.left);
          node.right && traversePostOrder(node.right);
          Result.push(node.data);
        };
        traversePostOrder(this.root);
        return Result;
      }
    }
    
    LevelOrder() {
        let result = [];
        let Q = []; 
        if (this.root != null) {
            Q.push(this.root);
            while(Q.length > 0) {
                let node = Q.shift();
                result.push(node.data);
                if (node.left != null) {
                    Q.push(node.left);
                };
                if (node.right != null) {
                    Q.push(node.right);
                };
            };
            return result;
        } else {
            return null;
        };
    };
  }
  const bst = new BST();
  
  bst.add(15);
  bst.add(25);
  bst.add(10);
  bst.add(7);
  bst.add(22);
  bst.add(17);
  bst.add(13);
  bst.add(5);
  bst.add(9);
  bst.add(27);
  console.log('Before Insertion ' + bst.LevelOrder());
  console.log("Removing element 7:"+bst.remove(7));
  console.log('After Insertion  :' + bst.LevelOrder());
  console.log("Is 20 present in it shown either true or false:\t"+bst.isPresent(20));
  console.log('inOrder:' + bst.InOrder());
  console.log('preOrder: ' + bst.PreOrder());
  console.log('postOrder: ' + bst.PostOrder());
  //Output-
  //Before Insertion 15,10,25,7,13,22,27,5,9,17
  //Removing element 7:undefined
  //After Insertion  :15,10,25,9,13,22,27,5,17
  //Is 20 present in it shown either true or false: false
  //inOrder:5,9,10,13,15,17,22,25,27
  //preOrder: 15,10,9,5,13,25,22,17,27
  //postOrder: 5,9,13,10,17,22,27,25,15
  
  
